export { createCache } from '@drupal-api-client/utils';
import { Sha256 } from '@aws-crypto/sha256-js';
import { ApiClient } from '@drupal-api-client/api-client';
import { DecoupledRouterClient, isRaw, isResolved } from '@drupal-api-client/decoupled-router-client';
import { toHex } from '@smithy/util-hex-encoding';

var T=Object.defineProperty;var A=(h,R,s)=>R in h?T(h,R,{enumerable:!0,configurable:!0,writable:!0,value:s}):h[R]=s;var y=(h,R,s)=>(A(h,typeof R!="symbol"?R+"":R,s),s);var $=class h extends ApiClient{constructor(s,e){super(s,e);y(this,"router");y(this,"indexLookup");y(this,"decoupledRouterApiPrefix");let{apiPrefix:t,cache:i,debug:a,indexLookup:n,decoupledRouterApiPrefix:l}=e||{};this.apiPrefix=t||"jsonapi",this.decoupledRouterApiPrefix=l,this.cache=i,this.debug=a||!1;let d={...e};this.decoupledRouterApiPrefix?d.apiPrefix=this.decoupledRouterApiPrefix:delete d.apiPrefix,this.router=new DecoupledRouterClient(s,d),this.indexLookup=n||!1;}async getCollection(s,e){let{entityTypeId:t,bundleId:i}=h.getEntityTypeIdAndBundleId(s),a=e?.locale||this.defaultLocale,n=e?.queryString,l=e?.rawResponse||!1,d=await h.createCacheKey({entityTypeId:t,bundleId:i,localeSegment:a,queryString:n});if(!l&&!e?.disableCache){let g=await this.getCachedResponse(d);if(g)return g}let c=await this.createURL({localeSegment:a,entityTypeId:t,bundleId:i,queryString:n});this.debug&&this.log("verbose",`Fetching endpoint ${c}`);let o=e?.disableAuthentication?{credentials:"omit"}:{},{response:r,error:p}=await this.fetch(c,o);if(p)throw this.debug&&this.log("error",`Failed to get collection. Type: ${s}, Error: ${p.message}`),p;let u=await this.processApiResponseAndParseBody(r.clone(),d,e);return e?.rawResponse?{response:r,json:u}:u}async getResource(s,e,t){let{entityTypeId:i,bundleId:a}=h.getEntityTypeIdAndBundleId(s),n=t?.locale||this.defaultLocale,l=t?.queryString,d=t?.rawResponse||!1,c=await h.createCacheKey({entityTypeId:i,bundleId:a,resourceId:e,localeSegment:n,queryString:l});if(!d&&!t?.disableCache){let f=await this.getCachedResponse(c);if(f)return f}let o=await this.createURL({localeSegment:n,entityTypeId:i,bundleId:a,resourceId:e,queryString:l});this.debug&&this.log("verbose",`Fetching endpoint ${o}`);let r=t?.disableAuthentication?{credentials:"omit"}:{},{response:p,error:u}=await this.fetch(o,r);if(u)throw this.debug&&this.log("error",`Failed to get resource. ResourceId: ${e}, Error: ${u.message}`),u;let g=await this.processApiResponseAndParseBody(p.clone(),c,t);return t?.rawResponse?{response:p,json:g}:g}async createURL({localeSegment:s,entityTypeId:e,bundleId:t,resourceId:i,queryString:a}){if(this.indexLookup){let c=new URL(`${s??""}/${this.apiPrefix}`,this.baseUrl).toString(),o=`${s?`${s}/`:""}${this.apiPrefix}`,r,p=await this.getCachedResponse(o);if(p)r=p;else {this.debug&&this.log("verbose",`Fetching index at ${c}`);let{response:f,error:w}=await this.fetch(c);if(w)throw this.debug&&this.log("error",`Failed to get index. Error: ${w.message}`),w;r=await f.json(),this.cache&&f.status<400&&await this.cache?.set(o,r);}let u=`${e}${t?`--${t}`:""}`,g=r?.links?.[u]?.href;if(g)return `${g}${i?`/${i}`:""}${a?`?${a}`:""}`}return new URL(`${s??""}/${this.apiPrefix}/${e}/${t}${i?`/${i}`:""}${a?`?${a}`:""}`,this.baseUrl).toString()}async deleteResource(s,e,t){let i=t?.locale||this.defaultLocale,{entityTypeId:a,bundleId:n}=h.getEntityTypeIdAndBundleId(s),l=await this.createURL({entityTypeId:a,bundleId:n,resourceId:e,localeSegment:i}),d=await h.createCacheKey({entityTypeId:a,bundleId:n});this.debug&&this.log("verbose",`Initiating deletion of resource. Type: ${s}, ResourceId: ${e}`);let c=t?.disableAuthentication?{credentials:"omit",method:"DELETE"}:{method:"DELETE"},{response:o,error:r}=await this.fetch(l,c);if(r)throw this.debug&&this.log("error",`Failed to delete resource. ResourceId: ${e}, Error: ${r.message}`),r;o.status===204?this.log("verbose",`Successfully deleted resource. ResourceId: ${e}`):this.log("error",`Failed to delete resource. ResourceId: ${e}, Status: ${o?.status}`);let p=await this.processApiResponseAndParseBody(o.clone(),d,t);return t?.rawResponse?{response:o,json:p}:p}static getEntityTypeIdAndBundleId(s){let[e,t]=s.split("--");return t?{entityTypeId:e,bundleId:t}:{entityTypeId:e,bundleId:""}}static async createCacheKey({entityTypeId:s,bundleId:e,localeSegment:t,resourceId:i,queryString:a}){let n=t?`${t}--`:"",l="",d=i?`--${i}`:"";if(a){let c=new Sha256;c.update(a);let o=await c.digest();l=`--${toHex(o)}`;}return `${n}${s}${e?`--${e}`:""}${d}${l}`}async getResourceByPath(s,e){let t=await this.router.translatePath(s,e),i=isRaw(t)?t.json:t;return isResolved(i)?this.getResource(i.jsonapi.resourceName,i.entity.uuid,e):i}async updateResource(s,e,t,i){let a=i?.locale||this.defaultLocale,{entityTypeId:n,bundleId:l}=h.getEntityTypeIdAndBundleId(s),d=await this.createURL({entityTypeId:n,bundleId:l,resourceId:e,localeSegment:a}),c=await h.createCacheKey({entityTypeId:n,bundleId:l});this.debug&&this.log("verbose",`Initiating update of resource. Type: ${s}, ResourceId: ${e}`);let o=new Headers;o.set("Accept","application/vnd.api+json"),o.set("Content-Type","application/vnd.api+json");let{response:r,error:p}=await this.fetch(d,{method:"PATCH",body:typeof t=="object"?JSON.stringify(t):t,credentials:i?.disableAuthentication?"omit":"same-origin",headers:o});if(p)throw this.debug&&this.log("error",`Failed to update resource. ResourceId: ${e}, Error: ${p.message}`),p;r?.status===200?this.log("verbose",`Successfully updated resource. ResourceId: ${e}`):this.log("error",`Failed to update resource. ResourceId: ${e}, Status: ${r?.status}`);let u=await this.processApiResponseAndParseBody(r.clone(),c,i);return i?.rawResponse?{response:r,json:u}:u}async createResource(s,e,t){let i=t?.locale||this.defaultLocale,{entityTypeId:a,bundleId:n}=h.getEntityTypeIdAndBundleId(s),l=await this.createURL({entityTypeId:a,bundleId:n,localeSegment:i}),d=await h.createCacheKey({entityTypeId:a,bundleId:n});this.debug&&this.log("verbose",`Initiating creation of resource. Type: ${s}`);let c=new Headers;c.set("Accept","application/vnd.api+json"),c.set("Content-Type","application/vnd.api+json");let{response:o,error:r}=await this.fetch(l,{method:"POST",body:typeof e=="object"?JSON.stringify(e):e,credentials:t?.disableAuthentication?"omit":"same-origin",headers:c});if(r)throw this.debug&&this.log("error",`Failed to create resource. Error: ${r.message}`),r;o?.status===201?this.log("verbose",`Successfully created resource of type: ${s}`):this.log("error",`Failed to create resource. Status: ${o?.status}`);let p=await this.processApiResponseAndParseBody(o.clone(),d,t);return t?.rawResponse?{response:o,json:p}:p}async processApiResponseAndParseBody(s,e,t){let i=s.status;if(i===204)return "";let a=await s.json();return a=this.serializer?.deserialize?this.serializer.deserialize(a):a,this.cache&&!t?.disableCache&&i<400&&await this.cache?.set(e,a),a}};

export { $ as JsonApiClient };
