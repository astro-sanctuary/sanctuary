import { Locale, ApiClient, BaseUrl, ApiClientOptions } from '@drupal-api-client/api-client';

/**
 * Options for customizing the get request.
 */
interface GetOptions {
    /**
     * The locale to use for the request.
     * If not set, the default locale will be used.
     * If no default locale is set, no locale will be used.
     */
    locale?: Locale;
    /**
     * Indicates whether the raw HTTP response should be returned.
     * When set to true, the response will not be parsed or processed, providing the raw, unaltered response from the server.
     */
    rawResponse?: boolean;
    /**
     * Whether or not to disable the cache for the request.
     */
    disableCache?: boolean;
    /**
     * Whether or not to disable the authentication for the request.
     */
    disableAuthentication?: boolean;
    /**
     * The cache key to use for the request.
     * If not set, the default cache key of `{lang}-{locale}--{entity}--{bundle}--{sha256 hash of query string if exists}` will be used.
     */
    cacheKey?: string;
}
/**
 * Shape of decoupled router response for a resolved path.
 */
interface ResolvedPath {
    resolved: string;
    isHomePath: boolean;
    entity: {
        uuid: string;
        [entityProperty: string]: string;
    };
    label: string;
    jsonapi: {
        resourceName: `${string}--${string}`;
        [jsonapiProperty: string]: string;
    };
    meta: {
        [metaProperty: string]: string | object;
    };
}
/**
 * Shape of decoupled router response for a path that could not be resolved.
 */
interface UnResolvedPath {
    message: string;
    details: string;
}
/**
 * Union of both possible decoupled router responses.
 */
type DecoupledRouterResponse = ResolvedPath | UnResolvedPath;
interface RawDecoupledRouterResponse {
    response: Response;
    json: DecoupledRouterResponse;
}
/**
 * Type predicate for
 * @param response
 * @returns true if the response is a {@link RawDecoupledRouterResponse}
 */
declare const isRaw: (response: DecoupledRouterResponse | RawDecoupledRouterResponse) => response is RawDecoupledRouterResponse;
/**
 * Type predicate for
 * @param response
 * @returns true if the response is a {@link ResolvedPath}
 */
declare const isResolved: (response: DecoupledRouterResponse) => response is ResolvedPath;

/**
 * Decoupled Router Client class provides functionality specific to the decoupled-router module.
 * @see {@link ApiClientOptions}
 * @see {@link BaseUrl}
 */
declare class DecoupledRouterClient extends ApiClient {
    /**
     * Creates a new instance of the DecoupledRouterClient.
     * @param baseUrl - The base URL of the API. {@link BaseUrl}
     * @param options - (Optional) Additional options for configuring the API client. {@link ApiClientOptions}
     */
    constructor(baseUrl: BaseUrl, options?: ApiClientOptions);
    /**
     * Translates a path in the consuming application to a Drupal entity.
     * @param path - the path to translate
     * @returns A Promise that resolves to the JSON data provided by the router.
     */
    translatePath(path: string, options?: GetOptions): Promise<DecoupledRouterResponse | RawDecoupledRouterResponse>;
    /**
     * Generates an endpoint URL based on the provided parameters.
     *
     * @params params - The parameters to use for creating the URL.
     * @returns The endpoint URL as a string.
     */
    createURL({ localeSegment, path }: {
        localeSegment?: string;
        path: string;
    }): string;
    /**
     * Generates a cache key based on the provided parameters.
     *
     * @params params - The parameters to use for generating the cache key.
     * @returns The generated cache key as a string.
     *
     * @example
     * const key1 = await this.createCacheKey('en', '/articles/give-your-oatmeal-the-ultimate-makeover');
     * // key1: 'en--/articles/give-your-oatmeal-the-ultimate-makeover'
     */
    static createCacheKey({ localeSegment, path, cacheKey, }: {
        localeSegment?: string;
        path?: string;
        cacheKey?: string;
    }): string;
}

export { DecoupledRouterClient, type DecoupledRouterResponse, type GetOptions, type RawDecoupledRouterResponse, type ResolvedPath, type UnResolvedPath, isRaw, isResolved };
