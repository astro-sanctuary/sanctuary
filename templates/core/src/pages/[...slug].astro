---
import { isResolved, isRaw } from "@drupal-api-client/decoupled-router-client";
import { router } from "@lib/client.ts";
import { setEdgeCacheHeaders } from "@/lib/utils.ts";
import Node from "@/components/Node.astro";
import { getEntry } from "astro:content";
import type { DataEntryMap } from "astro:content";

// Return a 404 if we can't translate a path
const { slug } = Astro.params;
const translatedPath = await router.translatePath(slug ? slug : "/");
// These type guards should be easier to use...
if (!isRaw(translatedPath) && !isResolved(translatedPath)) {
  return Astro.redirect("/404");
}

// Get the requested resource from our Drupal collections
const resourceType = !isRaw(translatedPath)
  ? translatedPath.jsonapi.resourceName
  : "";
const [, bundle] = resourceType.split("--");
const id =
  !isRaw(translatedPath) &&
  isResolved(translatedPath) &&
  translatedPath.entity?.uuid
    ? translatedPath.entity.uuid
    : "";

const node = await getEntry(bundle as keyof DataEntryMap, id);
if (!node) {
  return Astro.redirect("/404");
}

// Set ISR-style cache headers
setEdgeCacheHeaders(Astro.response.headers);
---

<Node node={node.data} resourceType={resourceType} />
