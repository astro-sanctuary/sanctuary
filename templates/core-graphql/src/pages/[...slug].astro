---
import { client, graphqlClient } from "@lib/client.ts";
import { setEdgeCacheHeaders } from "@/lib/utils.ts";
import Node from "@/components/Node.astro";
import type { NodeResult } from "@/types/nodes";

const { slug } = Astro.params;

const query: NodeResult = await graphqlClient.query(
  `query RouteQuery {
    route(path: "/${slug || ""}") {
      ... on RouteInternal {
        entity {
          __typename
          ... on NodePage {
            id
            title
            body {
              summary
              processed
            }
          }
          ... on NodeArticle {
            id
            title
            body {
              summary
              processed
            }
            image {
              url
              alt
            }
            created {
              time
            }
            changed {
              time
            }
          }
        }
      }
    }
  }`,
);

// TODO - Return a 404 if we can't translate a route
if (!query.data.route) {
  return Astro.redirect("/404");
}

const node = query.data.route.entity;

// Set ISR-style cache headers
setEdgeCacheHeaders(Astro.response.headers);
---

<Node node={node} resourceType={node.__typename} />
